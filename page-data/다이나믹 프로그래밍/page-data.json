{"componentChunkName":"component---src-templates-post-template-tsx","path":"/다이나믹 프로그래밍/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"다이나믹-프로그래밍\" style=\"position:relative;\">다이나믹 프로그래밍<a href=\"#%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"다이나믹 프로그래밍 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ul>\n<li>다이나믹 프로그래밍은 <strong>메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법</strong></li>\n<li><strong>이미 계산된 결과(작은 문제)는 별도의 메모리 영역에 저장</strong>하여 다시 계산하지 않도록 함</li>\n<li>다이나믹 프로그래밍의 구현은 일반적으로 **두 가지 방식(탑다운과 보텀업)**으로 구성</li>\n<li>다이나믹 프로그래밍은 <strong>동적 계획법</strong>이라고도 부름</li>\n<li>일반적인 프로그래밍 분야에서의 동적(Dynamic)이란 어떤 의미를 가질까?\n<ul>\n<li>자료구조에서 **동적 할당(Dynamic Allocation)**은 **‘프로그램이 실행되는 도중에 실행에 필요한 메모리를 할당하는 기법’**을 의미</li>\n<li>반면에 다이나믹 프로그래밍에서 ‘다이나믹’은 별다른 의미 없이 사용된 단어</li>\n</ul>\n</li>\n<li>다이나믹 프로그래밍은 문제가 다음의 조건을 만족할 떄 사용 가능\n<ul>\n<li><strong>최적 부분 구조 (Optimal Substructure)</strong>\n<ul>\n<li>큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있음</li>\n</ul>\n</li>\n<li><strong>중복되는 부분 문제 (Overlapping Subproblem)</strong>\n<ul>\n<li>동일한 작은 문제를 반복적으로 해결해야 함</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"피보나치-수열\" style=\"position:relative;\">피보나치 수열<a href=\"#%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4\" aria-label=\"피보나치 수열 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><strong>피보나치 수열</strong>은 다음과 같은 형태의 수열이며, 다이나믹 프로그래밍으로 효과적으로 계산 가능\n<ul>\n<li>1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …</li>\n</ul>\n</li>\n<li><strong>점화식</strong>이란 <strong>인접한 항들 사이의 관계식</strong>을 의미</li>\n<li>피보나치 수열을 점화식으로 표현하면 다음과 같음\n<ul>\n<li><code class=\"language-text\">a(n) = a(n-1) + a(n-2)</code></li>\n<li><code class=\"language-text\">a(1) = 1, a(2) = 1</code></li>\n</ul>\n</li>\n<li>피보나치 수열이 계산되는 과정은 다음과 같이 표현할 수 있음 - 프로그래밍에서는 이러한 수열을 <strong>배열이나 리스트를 이용</strong>해 표현\n<img src=\"https://velog.velcdn.com/images/minseok0123/post/799c3a2e-fcea-4414-9c29-040c9c308a24/image.png\" alt=\"\"></li>\n<li>피보나치 수열이 계산되는 과정은 다음과 같이 표현할 수 있음\n<ul>\n<li>n번째 피보나치 수를 f(n)라고 할 때 4번째 피보나치 수 f(4)를 구하는 과정은 다음과 같음</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/565e15b7-596c-45ca-b7a6-5d39691794c8/image.png\" alt=\"\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 피보나치 함수(Fibonacci Function)을 재귀함수로 구현</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> x <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">3</span></code></pre></div>\n<h3 id=\"피보나치-수열의-시간-복잡도-분석\" style=\"position:relative;\">피보나치 수열의 시간 복잡도 분석<a href=\"#%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84-%EB%B6%84%EC%84%9D\" aria-label=\"피보나치 수열의 시간 복잡도 분석 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>단순 재귀 함수로 피보나치 수열을 해결하면 지수 시간 복잡도를 가지게 됨</li>\n<li>다음과 같이 f(2)가 여러번 호출되는 것을 확인할 수 있음 (중복되는 부분 문제)</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/d0be3388-35c6-4aa8-ae6a-e13509a3455b/image.png\" alt=\"\"></p>\n<ul>\n<li>피보나치 수열의 시간 복잡도는 다음과 같음\n<ul>\n<li>세타 표기법: 𝜃(1.618⋯ᴺ)</li>\n<li>빅오 표기법: O(2ᴺ)</li>\n</ul>\n</li>\n<li>빅오 표기법을 기준으로 f(30)을 계산하기 위해 약 10억가량의 연산을 수행해야 함</li>\n</ul>\n<h3 id=\"피보나치-수열의-효율적인-해법-다이나믹-프로그래밍\" style=\"position:relative;\">피보나치 수열의 효율적인 해법: 다이나믹 프로그래밍<a href=\"#%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4%EC%9D%98-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-%ED%95%B4%EB%B2%95-%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D\" aria-label=\"피보나치 수열의 효율적인 해법 다이나믹 프로그래밍 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><strong>다이나믹 프로그래밍의 사용 조건</strong>을 만족하는지 확인\n<ul>\n<li><strong>최적 부분 구조</strong>: 큰 문제를 작은 문제로 나눌 수 있음</li>\n<li><strong>중복되는 부분 문제</strong>: 동일한 작은 문제를 반복적으로 해결</li>\n</ul>\n</li>\n<li>피보나치 수열은 다이나믹 프로그래밍의 사용 조건을 만족</li>\n</ul>\n<h3 id=\"메모이제이션-Memoization\" style=\"position:relative;\">메모이제이션 (Memoization)<a href=\"#%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98-Memoization\" aria-label=\"메모이제이션 Memoization permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><strong>메모이제이션</strong>은 다이나믹 프로그래밍을 구현하는 방법 중 하나 (<strong>탑다운 방식=하향식</strong>)</li>\n<li><strong>한 번 계산한 결과를 메모리 공간에 메모하는 기법</strong>\n<ul>\n<li>같은 문제를 다시 호출하면 메모했던 결과를 그대로 가져옴</li>\n<li>값을 기록해 놓는다는 점에서 **캐싱(Caching)**이라고도 함</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"탑다운-vs-보텀업\" style=\"position:relative;\">탑다운 vs 보텀업<a href=\"#%ED%83%91%EB%8B%A4%EC%9A%B4-vs-%EB%B3%B4%ED%85%80%EC%97%85\" aria-label=\"탑다운 vs 보텀업 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><strong>탑다운(메모이제이션) 방식</strong>은 <strong>하향식</strong>이라고도 하며 <strong>보텀업 방식</strong>은 <strong>상향식</strong>이라고도 함</li>\n<li><strong>다이나믹 프로그래밍의 전형적인 형태는 보텀업 방식</strong>\n<ul>\n<li><strong>결과 저장용 리스트는 DP 테이블</strong>이라고 부름</li>\n</ul>\n</li>\n<li>엄밀히 말하면 메모이제이션은 이전에 계산된 결과를 일시적으로 기록해 놓는 넓은 개념을 의미\n<ul>\n<li>따라서 메모이제이션은 다이나믹 프로그래밍에 국한된 개념은 아님</li>\n<li>한 번 계산된 결과를 담아 놓기만 하고 다이나믹 프로그래밍을 위해 활용하지 않을 수도 있음</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 피보나치 수열: 탑다운 다이나믹 프로그래밍 소스코드</span>\n\n<span class=\"token comment\"># 한 번 계산된 결과를 메모이제이션(Memoization)하기 위한 리스트 초기화</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># 피보나치 함수(Fibonacci Function)를 재귀함수로 구현(탑다운 다이나믹 프로그래밍)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">fibo</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 종료 조건(1 혹은 2일 때 1을 반환)</span>\n    <span class=\"token keyword\">if</span> x <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> x <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span>\n    <span class=\"token comment\"># 이미 계산한 적 있는 문제라면 그대로 반환</span>\n    <span class=\"token keyword\">if</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 아직 계산하지 않은 문제라면 점화식에 따라서 피보나치 결과 반환</span>\n    d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> fibo<span class=\"token punctuation\">(</span>x <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>fibo<span class=\"token punctuation\">(</span><span class=\"token number\">99</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">218922995834555169026</span></code></pre></div>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 피보나치 수열: 보텀업 다이나믹 프로그래밍 소스코드</span>\n\n<span class=\"token comment\"># 앞서 계산된 결과를 저장하기 위한 DP 테이블 초기화</span>\nd <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span>\n\n<span class=\"token comment\"># 첫번째 피보나치 수와 두번째 피보나치 수는 1</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\nd<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\nn <span class=\"token operator\">=</span> <span class=\"token number\">99</span>\n\n<span class=\"token comment\"># 피보나치 함수(Fibonacci Function) 반복문으로 구현(보텀업 다이나믹 프로그래밍)</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    d<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> d<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token number\">218922995834555169026</span></code></pre></div>\n<h3 id=\"피보나치-수열-메모이제이션-동작-분석\" style=\"position:relative;\">피보나치 수열: 메모이제이션 동작 분석<a href=\"#%ED%94%BC%EB%B3%B4%EB%82%98%EC%B9%98-%EC%88%98%EC%97%B4-%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98-%EB%8F%99%EC%9E%91-%EB%B6%84%EC%84%9D\" aria-label=\"피보나치 수열 메모이제이션 동작 분석 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>이미 계산된 결과를 메모리에 저장하면 다음과 같이 색칠된 노드만 처리할 것을 기대할 수 있음</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/d4af10cd-c6b6-4d7a-af51-cc6b68e5b5fa/image.png\" alt=\"\"></p>\n<ul>\n<li>실제로 호출되는 함수에 대해서만 확인해보면 다음과 같이 방문</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/d2fdc836-cabe-4f8f-8f03-ce46d370e185/image.png\" alt=\"\"></p>\n<ul>\n<li>메모이제이션을 이용하는 경우 피보나치 수열 함수의 시간 복잡도는 O(N)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">d = [0] * 100\n\ndef fibo(x):\n    print('f(' + str(x) + ')', end=' ')\n    if x == 1 or x == 2:\n        return 1\n    if d[x] != 0:\n        return d[x]\n    d[x] = fibo(x - 1) + fibo(x - 2)\n    return d[x]\n\nfibo(6)\n\n>>>> f(6) f(5) f(4) f(3) f(2) f(1) f(2) f(3) f(4)</code></pre></div>\n<h3 id=\"다이나믹-프로그래밍-vs-분할-정복\" style=\"position:relative;\">다이나믹 프로그래밍 vs 분할 정복<a href=\"#%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-vs-%EB%B6%84%ED%95%A0-%EC%A0%95%EB%B3%B5\" aria-label=\"다이나믹 프로그래밍 vs 분할 정복 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><strong>다이나믹 프로그래밍</strong>과 <strong>분할 정복</strong>은 <strong>모두 최적 부분 구조를 가질 때 사용 가능</strong>\n<ul>\n<li><strong>큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결할 수 있는 상황</strong></li>\n</ul>\n</li>\n<li>다이나믹 프로그래밍과 분할 정복의 <strong>차이점</strong>은 <strong>부분 문제의 중복</strong>\n<ul>\n<li>다이나믹 프로그래밍 문제에서는 각 부분 문제들이 서로 영향을 미치며 부분 문제가 중복</li>\n<li>분할 정복 문제에서는 동일한 부분 문제가 반복적으로 계산되지 않음</li>\n</ul>\n</li>\n<li><strong>분할 정복</strong>의 대표적인 예시로 <strong>퀵 정렬</strong>이 있음\n<ul>\n<li>한 번 기준 원소(Pivot)가 자리를 변경해서 자리를 잡으면 그 기준 원소의 위치는 바뀌지 않음</li>\n<li>분할 이후에 해당 피벗을 다시 처리하는 부분 문제는 호출하지 않음</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/1ba8ff89-f534-4403-b637-016a9041b75d/image.png\" alt=\"\"></p>\n<h3 id=\"다이나믹-프로그래밍-문제에-접근하는-방법\" style=\"position:relative;\">다이나믹 프로그래밍 문제에 접근하는 방법<a href=\"#%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%AC%B8%EC%A0%9C%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"다이나믹 프로그래밍 문제에 접근하는 방법 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>주어진 문제가 <strong>다이나믹 프로그래밍 유형임을 파악</strong>하는 것이 중요</li>\n<li>가장 먼저 그리디, 구현, 완전 탐색 등의 아이디어로 문제를 해결할 수 있는지 검토할 수 있음\n<ul>\n<li>다른 알고리즘으로 풀이 방법이 떠오르지 않는다면 다이나믹 프로그래밍을 고려</li>\n</ul>\n</li>\n<li>일단 재귀 함수로 비효율적인 완전 탐색 프로그램을 작성한 뒤에 (탑다운) 작은 문제에서 구한 답이 큰 문제에서 그대로 사용될 수 있으면, 코드를 개선하는 방법을 사용할 수 있음</li>\n<li>일반적인 코딩 테스트 수준에서는 기본 유형의 다이나믹 프로그래밍 문제가 출제되는 경우가 많음</li>\n</ul>\n<h2 id=\"마지막-정리\" style=\"position:relative;\">마지막 정리<a href=\"#%EB%A7%88%EC%A7%80%EB%A7%89-%EC%A0%95%EB%A6%AC\" aria-label=\"마지막 정리 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>다이나믹 프로그래밍(Dynamic Programming)은 문제를 작은 부분 문제로 나누어 해결하고, 중복 계산을 피하여 효율적으로 최적해를 구하는 알고리즘 기법이다. 주어진 문제를 작은 부분 문제로 쪼갠 후 하향식(Top-down) 메모이제이션 기법이나 상향식(Bottom-up) 반복적인 계산 기법을 사용하여 최적해를 구한다.</p>\n</blockquote>","frontmatter":{"title":"다이나믹 프로그래밍","summary":"다이나믹 프로그래밍은 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상시키는 방법","date":"2023.06.18","categories":["알고리즘","Python"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/4fd18ad7d6fe83b8aaf4c639d01365bc/dccd3/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.webp","srcSet":"/static/4fd18ad7d6fe83b8aaf4c639d01365bc/09d71/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.webp 320w,\n/static/4fd18ad7d6fe83b8aaf4c639d01365bc/359e0/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.webp 640w,\n/static/4fd18ad7d6fe83b8aaf4c639d01365bc/dccd3/%EB%8B%A4%EC%9D%B4%EB%82%98%EB%AF%B9%20%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D.webp 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[]},"width":1280,"height":800}},"publicURL":"/static/4fd18ad7d6fe83b8aaf4c639d01365bc/다이나믹 프로그래밍.png"}}}}]}},"pageContext":{"slug":"/다이나믹 프로그래밍/"}},"staticQueryHashes":[],"slicesMap":{}}