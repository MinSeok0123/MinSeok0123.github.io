{"componentChunkName":"component---src-templates-post-template-tsx","path":"/시뮬레이션과 완전탐색/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"시뮬레이션과-완전탐색-개념\" style=\"position:relative;\">시뮬레이션과 완전탐색 개념<a href=\"#%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%99%84%EC%A0%84%ED%83%90%EC%83%89-%EA%B0%9C%EB%85%90\" aria-label=\"시뮬레이션과 완전탐색 개념 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>시뮬레이션과 완전탐색은 CS에서 중요한 개념으로, 다양한 문제를 해결하기 위해 사용된다.\n시뮬레이션과 완전탐색에 대해 알아보고, 각각의 개념을 어떻게 활용하는지 알아보자.</p>\n<h3 id=\"1-시뮬레이션Simulation\" style=\"position:relative;\">1. 시뮬레이션(Simulation)<a href=\"#1-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98Simulation\" aria-label=\"1 시뮬레이션Simulation permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>머릿 속에 있는 알고리즘을 소스코드로 바꾸는 과정이다.\n알고리즘을 잘 세우더라도 알고리즘이 실제로 동작하지 않기 때문에 이러한 구현은 반드시 필요한 과정어떠한 알고리즘의 문제를 풀더라도 소스코드로 구현해야 하기 때문에 구현을 구분하지는 않지만, 알고리즘 과정에서 구현이 필요한 문제는 대체적으로 구현에 초점을 둔 어려운 문제가 많이 존재한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/e55ed6bb-5bdd-4a6d-82db-265db5ca1cc5/image.png\" alt=\"\"></p>\n<h3 id=\"2-완전탐색Exhaustive-Search\" style=\"position:relative;\">2. 완전탐색(Exhaustive Search)<a href=\"#2-%EC%99%84%EC%A0%84%ED%83%90%EC%83%89Exhaustive-Search\" aria-label=\"2 완전탐색Exhaustive Search permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>완전탐색은 가능한 모든 경우의 수를 나열하고, 그 중에서 문제의 조건을 만족하는 해결책을 찾는 방법이다. 모든 가능한 경우를 일일이 탐색하기 때문에 정확한 해결책을 찾을 수 있지만, 경우의 수가 많을 경우에는 시간과 리소스가 많이 소요될 수 있다. 따라서 완전탐색은 경우의 수가 비교적 작을 때에 유용하게 활용된다.</p>\n<h2 id=\"문제---상하좌우\" style=\"position:relative;\">문제 - 상하좌우<a href=\"#%EB%AC%B8%EC%A0%9C---%EC%83%81%ED%95%98%EC%A2%8C%EC%9A%B0\" aria-label=\"문제   상하좌우 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<blockquote>\n<p>여행가 A는 NxN 크기의 정사각형 공간에 서 있고, 이 공간은 1 x 1 크기의 정사각형으로 나누어져 있다.가장 왼쪽 위 좌표는 (1, 1)이고 가장 오른쪽 아래 좌표는 (N, N)이다.상하좌우로 이동할 수 있으며, 시작 좌표는 (1,1)이다.</p>\n<p>계획서대로 이동하면 되는데 L, R, U, D는 각각 왼쪽, 오른쪽, 위, 아래로 한칸씩 이동하라는 뜻이다.</p>\n<p>만약 공간을 벗어나는 움직임이 있다면 그 움직임은 무시하고 다음으로 넘어간다.</p>\n<p>계획서에는 하나의 줄에 띄어쓰기를 기준으로 L, R, U, D 중 하나의 문자가 반복적으로 적혀있다. 각 문자의 의미는 다음과 같다</p>\n<ul>\n<li>L: 왼쪽으로 한 칸 이동</li>\n<li>R: 오른쪽으로 한 칸 이동</li>\n<li>U: 위로 한 칸 이동</li>\n<li>D: 아래로 한 칸 이동</li>\n</ul>\n</blockquote>\n<p>이때 여행가 A가 N × N 크기의 정사각형 공간을 벗어나는 움직임은 무시된다예를 들어 (1, 1)의 위치에서 L 혹은 U를 만나면 무시된다다음은 N = 5인 지도와 계획이다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/0cda2031-eff7-40d9-83d2-ed69060b26de/image.png\" alt=\"\"></p>\n<h2 id=\"코드\" style=\"position:relative;\">코드<a href=\"#%EC%BD%94%EB%93%9C\" aria-label=\"코드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 정사각형 공간을 입력받는다.</span>\nx<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span>  <span class=\"token comment\"># 시작 좌표는 항상 (1, 1)이므로 1, 1로 x, y 초기화</span>\nplans <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\"># 이동 계획을 입력받는다.</span>\n\n<span class=\"token comment\"># 상하좌우(L, R, U, D)에 따른 이동 방향</span>\ndx <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\ndy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\nmove_types <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'L'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'R'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'U'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># 입력받은 이동 계획을 하나씩 조회</span>\n<span class=\"token keyword\">for</span> plan <span class=\"token keyword\">in</span> plans<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>move_types<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    \t<span class=\"token comment\"># move_types와 일치하는 plan이 있다면</span>\n        <span class=\"token keyword\">if</span> plan <span class=\"token operator\">==</span> move_types<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 이동한 A의 좌표 nx, ny</span>\n            nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> dx<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> dy<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\"># N x N 크기의 정사각형을 벗어나면 움직임은 무시되므로</span>\n    <span class=\"token keyword\">if</span> nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> ny <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token keyword\">or</span> nx <span class=\"token operator\">></span> n <span class=\"token keyword\">or</span> ny <span class=\"token operator\">></span> n<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">continue</span>\n\n    <span class=\"token comment\">#  공간안에 있다면 A의 좌표 이동</span>\n    x<span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> nx<span class=\"token punctuation\">,</span> ny\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<ol>\n<li>입력으로 정사각형 공간의 크기 N을 받습니다.</li>\n<li>A의 초기 위치를 (1, 1)로 설정합니다.</li>\n<li>이동 계획을 입력받습니다.</li>\n<li>상하좌우 이동에 따른 x, y의 변화량을 설정합니다.</li>\n<li>이동 계획을 하나씩 조회하며, 이동 계획과 move_types를 비교하여 일치하는 이동 방향을 찾습니다.</li>\n<li>해당 이동 방향에 따라 A의 좌표를 이동합니다.</li>\n<li>이동한 좌표가 정사각형 공간을 벗어나지 않는지 체크하고, 벗어나면 움직임을 무시합니다.</li>\n<li>모든 이동 계획을 처리한 후 A의 최종 위치를 출력합니다.</li>\n</ol>\n<h3 id=\"3-시뮬레이션과-완전탐색의-활용-예시\" style=\"position:relative;\">3. 시뮬레이션과 완전탐색의 활용 예시<a href=\"#3-%EC%8B%9C%EB%AE%AC%EB%A0%88%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%99%84%EC%A0%84%ED%83%90%EC%83%89%EC%9D%98-%ED%99%9C%EC%9A%A9-%EC%98%88%EC%8B%9C\" aria-label=\"3 시뮬레이션과 완전탐색의 활용 예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>시뮬레이션과 완전탐색은 다양한 문제 해결에 활용될 수 있다.</p>\n<ul>\n<li>게임 개발: 게임에서 특정 상황의 결과를 예측하고 시뮬레이션하여 게임의 균형을 조절하거나 최적화할 수 있다. 완전탐색을 사용하여 게임의 모든 가능한 상태를 탐색하여 최적 전략을 찾을 수도 있다.</li>\n<li>경제 모델링: 경제학자들은 경제 시스템을 모델링하여 다양한 정책 결정에 대한 결과를 예측하고 분석한다. 시뮬레이션을 통해 경제 시스템의 동작을 모방하고, 완전탐색을 통해 최적의 정책을 찾을 수 있다.</li>\n<li>여행 경로 최적화: 여행 경로 최적화 문제는 주어진 도시들을 방문하는 가장 짧은 경로를 찾는 문제이다. 가능한 모든 경로를 탐색하여 최단 경로를 찾을 수 있다.</li>\n</ul>","frontmatter":{"title":"시뮬레이션과 완전탐색","summary":"시뮬레이션과 완전탐색은 CS에서 중요한 개념으로, 다양한 문제를 해결하기 위해 사용된다. 시뮬레이션과 완전탐색에 대해 알아보고, 각각의 개념을 어떻게 활용하는지 알아보자.","date":"2023.05.12","categories":["알고리즘","Python"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#185858","images":{"fallback":{"src":"/static/cc3ebf5b6a941408a03a690e03ec3a5f/ccc41/simulation.png","srcSet":"/static/cc3ebf5b6a941408a03a690e03ec3a5f/bf8e1/simulation.png 128w,\n/static/cc3ebf5b6a941408a03a690e03ec3a5f/acb7c/simulation.png 256w,\n/static/cc3ebf5b6a941408a03a690e03ec3a5f/ccc41/simulation.png 512w","sizes":"(min-width: 512px) 512px, 100vw"},"sources":[{"srcSet":"/static/cc3ebf5b6a941408a03a690e03ec3a5f/6766a/simulation.webp 128w,\n/static/cc3ebf5b6a941408a03a690e03ec3a5f/22bfc/simulation.webp 256w,\n/static/cc3ebf5b6a941408a03a690e03ec3a5f/d689f/simulation.webp 512w","type":"image/webp","sizes":"(min-width: 512px) 512px, 100vw"}]},"width":512,"height":512}},"publicURL":"/static/cc3ebf5b6a941408a03a690e03ec3a5f/simulation.png"}}}}]}},"pageContext":{"slug":"/시뮬레이션과 완전탐색/"}},"staticQueryHashes":[],"slicesMap":{}}