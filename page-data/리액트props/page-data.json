{"componentChunkName":"component---src-templates-post-template-tsx","path":"/리액트props/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/d26ec442-8ff1-4e5c-a7bb-18f93181fcf5/image.png\" alt=\"\"></p>\n<h1>1. 리액트 프로퍼티 (props)를 사용하는 이유</h1>\n<p>리액트는 UI 라이브러리로서, 컴포넌트를 사용하여 UI를 구성한다. 이 때, 컴포넌트 간의 데이터 전달을 위해 프로퍼티(Props)를 사용해야한다.</p>\n<h1>2. 프로퍼티의 특징은 무엇인가?</h1>\n<p>프로퍼티는 부모 컴포넌트에서 자식 컴포넌트로 전달되는 데이터라서. 이 데이터는 자식 컴포넌트에서 읽기 전용으로 사용된다. 즉, 자식 컴포넌트에서는 해당 데이터를 직접 수정할 수 없다.</p>\n<h1>3. 프로퍼티 전달방법</h1>\n<p>프로퍼티는 부모 컴포넌트에서 자식 컴포넌트로 전달될 때 객체 형태로 전달된다. 자식 컴포넌트에서는 이 객체를 받아서 사용할 수 있다. 프로퍼티는 함수형 컴포넌트에서는 함수의 매개변수로, 클래스형 컴포넌트에서는 this.props로 접근할 수 있다.</p>\n<blockquote>\n<p>아래는 프로퍼티를 이용하여 부모 컴포넌트에서 자식 컴포넌트로 이름과 나이를 전달하는 코드이다.</p>\n</blockquote>\n<p><em>부모 컴포넌트</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from 'react';\nimport ChildComponent from './ChildComponent';\n\nfunction ParentComponent() {\n  return (\n    &lt;div>\n      &lt;ChildComponent name=\"John\" age={30} />\n    &lt;/div>\n  );\n}\n\nexport default ParentComponent;\n</code></pre></div>\n<p><em>자식 컴포넌트</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React from 'react';\n\nfunction ChildComponent(props) {\n  const { name, age } = props;\n  return (\n    &lt;div>\n      &lt;p>Name: {name}&lt;/p>\n      &lt;p>Age: {age}&lt;/p>\n    &lt;/div>\n  );\n}\n\nexport default ChildComponent;\n</code></pre></div>\n<h1>4. 자식 컴포넌트에서 부모 컴포넌트의 상태 변경을 위한 콜백 함수 전달 방법</h1>\n<p>프로퍼티를 사용하여 자식 컴포넌트에서 부모 컴포넌트의 상태를 변경하고 싶다면, 콜백 함수를 프로퍼티로 전달하여 사용할 수 있다. 이 콜백 함수는 자식 컴포넌트에서 실행되어 부모 컴포넌트의 상태를 변경할 수 있다.</p>\n<blockquote>\n<p>부모 컴포넌트에서 자식 컴포넌트에서 실행될 콜백 함수를 만들어 전달하는 코드이다.</p>\n</blockquote>\n<p><em>부모 컴포넌트</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from 'react';\nimport ChildComponent from './ChildComponent';\n\nfunction ParentComponent() {\n  const [name, setName] = useState('John');\n\n  const handleNameChange = (newName) => {\n    setName(newName);\n  };\n\n  return (\n    &lt;div>\n      &lt;p>Name: {name}&lt;/p>\n      &lt;ChildComponent onNameChange={handleNameChange} />\n    &lt;/div>\n  );\n}\n\nexport default ParentComponent;\n</code></pre></div>\n<p><em>자식 컴포넌트</em></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">import React, { useState } from 'react';\n\nfunction ChildComponent(props) {\n  const [inputName, setInputName] = useState('');\n\n  const handleInputChange = (event) => {\n    setInputName(event.target.value);\n  };\n\n  const handleButtonClick = () => {\n    props.onNameChange(inputName);\n    setInputName('');\n  };\n\n  return (\n    &lt;div>\n      &lt;input type=\"text\" value={inputName} onChange={handleInputChange} />\n      &lt;button onClick={handleButtonClick}>Change Name&lt;/button>\n    &lt;/div>\n  );\n}\n\nexport default ChildComponent;\n</code></pre></div>\n<h1>5. 프로퍼티를 사용한 컴포넌트 간 데이터 전달의 장점은 무엇인가?</h1>\n<p>프로퍼티를 사용하면 데이터를 쉽게 공유하고 재사용할 수 있어 코드의 재사용성이 높아지며, 단방향 데이터 흐름으로 인해 데이터 추적이 쉬워지고 디버깅이 쉬워지며, 컴포넌트 간의 의존성이 낮아져 코드 수정이나 유지 보수가 쉬워지며, 가상 DOM을 사용하여 성능을 개선할 수 있다.</p>","frontmatter":{"title":"리액트 props","summary":"리액트 props 사용방법을 알아보자.","date":"2023.04.11.","categories":["Web","Backend","Hacking","Algorithm"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#68e8f8","images":{"fallback":{"src":"/static/380efaa1b56d9db5c885cd160379ac31/d8461/react.png","srcSet":"/static/380efaa1b56d9db5c885cd160379ac31/342c3/react.png 56w,\n/static/380efaa1b56d9db5c885cd160379ac31/e101a/react.png 113w,\n/static/380efaa1b56d9db5c885cd160379ac31/d8461/react.png 225w","sizes":"(min-width: 225px) 225px, 100vw"},"sources":[{"srcSet":"/static/380efaa1b56d9db5c885cd160379ac31/f8744/react.webp 56w,\n/static/380efaa1b56d9db5c885cd160379ac31/26b1c/react.webp 113w,\n/static/380efaa1b56d9db5c885cd160379ac31/252a0/react.webp 225w","type":"image/webp","sizes":"(min-width: 225px) 225px, 100vw"}]},"width":225,"height":225}},"publicURL":"/static/380efaa1b56d9db5c885cd160379ac31/react.png"}}}}]}},"pageContext":{"slug":"/리액트props/"}},"staticQueryHashes":[],"slicesMap":{}}