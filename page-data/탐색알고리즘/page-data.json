{"componentChunkName":"component---src-templates-post-template-tsx","path":"/탐색알고리즘/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"순차탐색알고리즘\" style=\"position:relative;\">순차탐색알고리즘<a href=\"#%EC%88%9C%EC%B0%A8%ED%83%90%EC%83%89%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"순차탐색알고리즘 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법</p>\n<ul>\n<li>주로, 정렬되지 않는 리스트에서 데이터를 하나씩 차례대로 확인하는 방법</li>\n<li>리스트 내에 데이터가 아무리 많아도 시간만 충분하다면 항상 원하는 원소(데이터)를 찾을 수 있다는 장점</li>\n<li>리스트에 특정 원소가 있는 지 체크할 경우, 리스트에서 특정한 값을 가지는 원소의 개수를 세는 count() 메서드 이용할 경우</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\">#순차 탐색 코드</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">sequentail_search</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token comment\">#각 원소를 하나씩 확인하며</span>\n  <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\">#현재의 원소가 찾고자 하는 원소가 동일한 경우</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token comment\">#현재의 위치 변환(인덱스는 0부터 시작하므로 1더하기)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'생성할 원소 개수를 입력한 다음 한 칸 띄고 찾을 문자열을 입력하세요.'</span><span class=\"token punctuation\">)</span>\ninput_data <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nn <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span>input_data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#원소의 개수</span>\ntarget <span class=\"token operator\">=</span> input_data<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">#찾고자 하는 문자열</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'앞서 적은 원소 개수만큼 문자열을 입력하세요. 구분은 띄어쓰기 한 칸으로 합니다.'</span><span class=\"token punctuation\">)</span>\narray <span class=\"token operator\">=</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#순차 탐색 수형결과 출력</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>sequentail_search<span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"이진탐색알고리즘\" style=\"position:relative;\">이진탐색알고리즘<a href=\"#%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"이진탐색알고리즘 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ul>\n<li>이진 탐색: 정렬되어 있는 리스트에서 탐색 범위를 절반씩 좁혀가며 데이터를 탐색하는 방법\n<ul>\n<li>이진 탐색은 시작점, 끝점, 중간점을 이용하여 탐색 범위를 설정한다</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"이진-탐색-동작-예시\" style=\"position:relative;\">이진 탐색 동작 예시<a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%EB%8F%99%EC%9E%91-%EC%98%88%EC%8B%9C\" aria-label=\"이진 탐색 동작 예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>이미 정렬된 10개의 데이터 중에서 값이 4인 원소를 찾는 예시를 살펴보자\n<img src=\"https://velog.velcdn.com/images/minseok0123/post/9ba4721a-c960-4925-97e8-a80eddcc3d55/image.png\" alt=\"\"></li>\n<li><strong>[Step 1]</strong> 시작점: 0, 끝점: 9, 중간점: 4 (소수점 이하 제거)\n<img src=\"https://velog.velcdn.com/images/minseok0123/post/9d2823ae-177e-4255-a268-c10f29e78f5a/image.png\" alt=\"\"></li>\n<li><strong>[Step 2]</strong> 시작점:0, 끝점: 3, 중간점: 1 (소수점 이하 제거)\n<img src=\"https://velog.velcdn.com/images/minseok0123/post/77cef67b-a7df-427c-99e0-957112c3655f/image.png\" alt=\"\"></li>\n<li><strong>[Step 3]</strong> 시작점: 2, 끝점: 3, 중간점: 2 (소수점 이하 제거)\n<img src=\"https://velog.velcdn.com/images/minseok0123/post/b8a1ff21-c596-470b-9264-9bd14ecd401d/image.png\" alt=\"\"></li>\n</ul>\n<hr>\n<h2 id=\"이진-탐색의-시간-복잡도\" style=\"position:relative;\">이진 탐색의 시간 복잡도<a href=\"#%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"이진 탐색의 시간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>단계마다 탐색 범위를 2로 나누는 것과 동일하므로 연산 횟수는 log₂𝑁에 비례한다</li>\n<li>예를 들어 초기 데이터 개수가 32개일 때, 이상적으로 1단계를 거치면 16개가량의 데이터만 남는다\n<ul>\n<li>2단계를 거치면 8개가량의 데이터만 남는다</li>\n<li>3단계를 거치면 4개가량의 데이터만 남는다</li>\n</ul>\n</li>\n</ul>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 이진 탐색 소스코드 구현 (재귀 함수)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> start <span class=\"token operator\">></span> end<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n    mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n    <span class=\"token comment\"># 찾은 경우 중간점 인덱스 반환</span>\n    <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> mid\n    <span class=\"token comment\"># 중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인</span>\n    <span class=\"token keyword\">elif</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\"># 중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># n(원소의 개수)과 target(찾고자 하는 값)을 입력 받기</span>\nn<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 전체 원소 입력 받기</span>\narray <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 이진 탐색 수행 결과 출력</span>\nresult <span class=\"token operator\">=</span> binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"원소가 존재하지 않습니다\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># 이진 탐색 소스코드 구현 (반복문)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">while</span> start <span class=\"token operator\">&lt;=</span> end<span class=\"token punctuation\">:</span>\n        mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>start <span class=\"token operator\">+</span> end<span class=\"token punctuation\">)</span> <span class=\"token operator\">//</span> <span class=\"token number\">2</span>\n        <span class=\"token comment\"># 찾은 경우 중간점 인덱스 반환</span>\n        <span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> mid\n        <span class=\"token comment\"># 중간점의 값보다 찾고자 하는 값이 작은 경우 왼쪽 확인</span>\n        <span class=\"token keyword\">elif</span> array<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span>\n            end <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\"># 중간점의 값보다 찾고자 하는 값이 큰 경우 오른쪽 확인</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            start <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n<span class=\"token comment\"># n(원소의 개수)과 target(찾고자 하는 값)을 입력 받기</span>\nn<span class=\"token punctuation\">,</span> target <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 전체 원소 입력 받기</span>\narray <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 이진 탐색 수행 결과 출력</span>\nresult <span class=\"token operator\">=</span> binary_search<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> result <span class=\"token operator\">==</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"원소가 존재하지 않습니다.\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"마지막-정리\" style=\"position:relative;\">마지막 정리<a href=\"#%EB%A7%88%EC%A7%80%EB%A7%89-%EC%A0%95%EB%A6%AC\" aria-label=\"마지막 정리 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><strong><em>이진 탐색</em></strong></p>\n<ul>\n<li>정렬된 배열에서 중간 값을 비교하여 탐색 범위를 반씩 줄여가며 원하는 값을 찾는 알고리즘.</li>\n<li>시간 복잡도는 O(log n)으로 매우 효율적이지만, 배열이 정렬되어 있어야 한다는 제약이 있다.</li>\n<li>이진 탐색은 반복문 또는 재귀적으로 구현할 수 있다.</li>\n</ul>\n<p><em><strong>순차 탐색</strong></em></p>\n<ul>\n<li>배열이나 리스트와 같은 선형 구조에서 처음부터 끝까지 원하는 값을 찾을 때 사용하는 간단한 탐색 알고리즘.</li>\n<li>시간 복잡도는 O(n)으로 배열의 크기에 비례하여 선형적으로 증가한다.</li>\n<li>배열이나 리스트의 크기가 작거나 정렬되지 않은 경우에 유용하게 사용될 수 있다.</li>\n</ul>","frontmatter":{"title":"탐색알고리즘","summary":"리스트 안에 있는 특정한 데이터를 찾기 위해 앞에서부터 데이터를 하나씩 차례대로 확인하는 방법","date":"2023.06.17","categories":["알고리즘","Python"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#a87888","images":{"fallback":{"src":"/static/3f7fbd3be95364da1f101e9494b3be1c/dccd3/%ED%83%90%EC%83%89%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.webp","srcSet":"/static/3f7fbd3be95364da1f101e9494b3be1c/09d71/%ED%83%90%EC%83%89%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.webp 320w,\n/static/3f7fbd3be95364da1f101e9494b3be1c/359e0/%ED%83%90%EC%83%89%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.webp 640w,\n/static/3f7fbd3be95364da1f101e9494b3be1c/dccd3/%ED%83%90%EC%83%89%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98.webp 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[]},"width":1280,"height":800}},"publicURL":"/static/3f7fbd3be95364da1f101e9494b3be1c/탐색알고리즘.png"}}}}]}},"pageContext":{"slug":"/탐색알고리즘/"}},"staticQueryHashes":[],"slicesMap":{}}