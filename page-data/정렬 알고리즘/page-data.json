{"componentChunkName":"component---src-templates-post-template-tsx","path":"/정렬 알고리즘/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<ul>\n<li>정렬알고리즘</li>\n</ul>\n<p><strong>정렬 알고리즘은 주어진 데이터 집합을 특정한 기준에 따라 순서대로 정렬하는 알고리즘이다.</strong></p>\n<ul>\n<li>어떻게 정렬할 수 있을까?</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/8395ff78-e9d1-4db0-941f-866e8bb99ece/image.png\" alt=\"\"></p>\n<h1 id=\"선택정렬\" style=\"position:relative;\">[선택정렬]<a href=\"#%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC\" aria-label=\"선택정렬 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>처리되지 않은 데이터 중에서 가장 작은 데이터를 선택해 맨 앞에 있는 데이터와 바꾸는 것을 반복합니다.</p>\n<p>이 알고리즘의 핵심 아이디어는 매번 정렬되지 않은 부분에서 최소값을 찾아서 앞으로 이동시키는 것입니다. 이를 통해 배열의 가장 작은 요소가 정렬 과정 중에 제 위치를 찾아가게 되고, 나머지 요소들도 동일한 원리로 정렬됩니다.</p>\n<h3 id=\"선택-정렬-동작-예시\" style=\"position:relative;\">선택 정렬 동작 예시<a href=\"#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%EB%8F%99%EC%9E%91-%EC%98%88%EC%8B%9C\" aria-label=\"선택 정렬 동작 예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">[Step 0]</code> 처리되지 않은 데이터 중 가장 작은 ‘0’을 선택해 가장 앞의 ‘7’과 바꾼다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/f49cf2aa-c493-4eb6-a1d9-a30e55687329/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[Step 1]</code> 처리되지 않은 데이터 중 가장 작은 ‘1’을 선택해 가장 앞의 ‘5’와 바꾼다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/76d0da14-0233-48e3-83ce-ac4e3fb44983/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[Step 2]</code> 처리되지 않은 데이터 중 가장 작은 ‘2’를 선택해 가장 앞의 ‘9’와 바꾼다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/321dee96-a939-4851-a718-9a2e0d6699de/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[Step 3]</code> 처리되지 않은 데이터 중 가장 작은 ‘3’을 선택해 가장 앞의 ‘7’과 바꾼다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/f1c1055f-804b-4347-9611-7d53cd778719/image.png\" alt=\"\"></p>\n<p>이러한 과정을 반복하면 다음과 같이 정렬이 완료된다.</p>\n<p>→ 가장 작은 것을 선택해서 앞으로 보내는 과정을 반복해서 수행하다 보면, 전체 데이터의 정렬이 이루어진다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/1c31e865-5abc-4aaa-bd0d-f5ae98079c6a/image.png\" alt=\"\"></p>\n<p>선택정렬 소스 코드</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\tmin_index <span class=\"token operator\">=</span> i\n\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\tmin_index <span class=\"token operator\">=</span> j\n\tarray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>min_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[0 1 2 3 4 5 6 7 8 9]</code></pre></div>\n<h3 id=\"선택-정렬의-시간-복잡도\" style=\"position:relative;\">선택 정렬의 시간 복잡도<a href=\"#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"선택 정렬의 시간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>선택 정렬의 시간 복잡도는 O(n^2)로, 배열의 크기에 비례하여 비효율적입니다.\n그러나 선택 정렬은 구현이 간단하고 이해하기 쉬우며, 정렬해야 할 요소의 수가 상대적으로 작을 때 유용할 수 있습니다.</p>\n<ul>\n<li>선택 정렬은 N번 만큼 가장 작은 수를 찾아서 맨 앞으로 보내야 한다.</li>\n<li>구현 방식에 따라서 사소한 오차는 있을 수 있지만, 전체 연산 횟수는 다음과 같다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/5868ecb5-6e5d-4b2b-92bc-f591635d2e36/image.png\" alt=\"\"></p>\n<ul>\n<li>이는 (*N^*2+<em>N</em>+2)/2로 표현할 수 있는데, 빅오 표현법에 따라서 <em>O</em>(*N^*2)이라고 작성한다.</li>\n</ul>\n<h1 id=\"삽입정렬\" style=\"position:relative;\">[삽입정렬]<a href=\"#%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC\" aria-label=\"삽입정렬 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p>삽입 정렬의 핵심 아이디어는 정렬된 부분 배열에 새로운 원소를 삽입하는 동안 정렬된 순서를 유지한다는 것입니다. 따라서, 배열이 이미 거의 정렬되어 있는 경우에는 효율적으로 동작하며, 작은 규모의 입력에 대해서도 성능이 좋습니다.</p>\n<ul>\n<li>처리되지 않은 데이터를 하나씩 골라 적절한 위치에 삽입한다.</li>\n<li>선택 정렬에 비해 구현 난이도가 높은 편이지만, 일반적으로 더 효율적으로 동작한다.</li>\n</ul>\n<h3 id=\"삽입-정렬-동작-예시\" style=\"position:relative;\">삽입 정렬 동작 예시<a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC-%EB%8F%99%EC%9E%91-%EC%98%88%EC%8B%9C\" aria-label=\"삽입 정렬 동작 예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">[Step 0]</code> 첫 번째 데이터 ‘7’은 그 자체로 정렬이 되어 있다고 판단하고, 두 번째 데이터인 ‘5’가 어떤 위치로 들어갈지 판단한다. ‘7’의 왼쪽으로 들어가거나 오른쪽으로 들어가거나 두 경우만 존재한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/a5999124-08d7-4896-8665-ef86ae089268/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[Step 1]</code> 이어서 ‘9’가 어떤 위치로 들어갈지 판단한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/a992c974-23b7-4896-a7ac-96932f3ae382/image.png\" alt=\"\"></p>\n<p>‘9’는 차례대로 왼쪽에 있는 데이터와 비교해서 왼쪽 데이터보다 더 작다면 위치를 바꿔 주고 그렇지 않다면 그냥 그 자리에 머물러 있도록 한다. ‘9’는 ‘7’보다 더 크기 때문에 현재 위치 그대로 내버려 둔다.</p>\n<p><code class=\"language-text\">[Step 2]</code>  이어서 ‘0’이 어떤 위치로 들어갈지 판단한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/8f710680-7ecb-4e71-8a9a-80f48a2a848e/image.png\" alt=\"\"></p>\n<p>‘0’은 ‘9’, ‘7’, ‘5’와 비교했을 때 모두 작기 때문에 ‘5’의 왼쪽에 위치한다.</p>\n<p>이러한 과정을 반복하면 다음과 같이 정렬이 완성된다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/27af6645-9703-4601-9a34-495178c5ee50/image.png\" alt=\"\"></p>\n<h3 id=\"삽입-정렬-소스코드\" style=\"position:relative;\">삽입 정렬 소스코드<a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C\" aria-label=\"삽입 정렬 소스코드 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">for</span> j <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\tarray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n\t\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\t\t\t<span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">[실행 결과]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[0,1,2,3,4,5,6,7,8,9]</code></pre></div>\n<h3 id=\"삽입-정렬의-시간-복잡도\" style=\"position:relative;\">삽입 정렬의 시간 복잡도<a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"삽입 정렬의 시간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>삽입 정렬의 시간 복잡도는 최악의 경우에는 O(n^2)이며, 최선의 경우에는 O(n)입니다. 여기서 n은 배열의 크기를 나타냅니다. 또한, 삽입 정렬은 제자리 정렬(in-place sorting) 알고리즘이므로, 추가적인 메모리 공간을 필요로 하지 않습니다.</p>\n<ul>\n<li>삽입 정렬의 시간 복잡도는 <em>O</em>(*N^*2)이며, 선택 정렬과 마찬가지로 반복문이 두 번 중첩되어 사용된다.</li>\n<li>삽입 정렬은 현재 리스트의 데이터가 거의 정렬되어 있는 상태라면 매우 빠르게 동작한다.<code class=\"language-text\">최선의 경우 O(N)의 시간 복잡도를 가진다.</code></li>\n</ul>\n<h1 id=\"퀵정렬\" style=\"position:relative;\">[퀵정렬]<a href=\"#%ED%80%B5%EC%A0%95%EB%A0%AC\" aria-label=\"퀵정렬 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ul>\n<li>기준 데이터를 설정하고 <strong>그 기준보다 큰 데이터와 작은 데이터의 위치를 바꾸는 방법</strong>이다.</li>\n<li>일반적인 상황에서 가장 많이 사용되는 정렬 알고리즘 중 하나이다.</li>\n<li>병합 정렬과 더불어 대부분의 프로그래밍 언어의 정렬 라이브러리의 근간이 되는 알고리즘이다.</li>\n<li>가장 기본적인 퀵 정렬은 <strong>첫 번째 데이터를 기준 데이터(pivot)로 설정</strong>한다.</li>\n</ul>\n<h3 id=\"퀵-정렬-동작-예시\" style=\"position:relative;\">퀵 정렬 동작 예시<a href=\"#%ED%80%B5-%EC%A0%95%EB%A0%AC-%EB%8F%99%EC%9E%91-%EC%98%88%EC%8B%9C\" aria-label=\"퀵 정렬 동작 예시 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">[Step 0]</code> 현재 피벗의 값은 ‘5’이다. 왼쪽에서부터 ‘5’보다 큰 데이터를 선택하므로 ‘7’이 선택되고, 오른쪽에서부터 ‘5’보다 작은 데이터를 선택하므로 ‘4’가 선택된다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/bc9e8f91-8faf-48d7-943d-776cc4fbd659/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[Step 1]</code> 현재 피벗의 값은 ‘5’이다. 왼쪽에서부터 ‘5’보다 큰 데이터를 선택하므로 ‘9’가 선택되고, 오른쪽에서부터 ‘5’보다 작은 데이터를 선택하므로 ‘2’가 선택된다. 이제 이 두 데이터의 위치를 서로 변경한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/c2e69da9-7aae-4449-9080-0689e133b060/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[Step 0]</code>현재 피벗의 값은 ‘5’이다. 왼쪽에서부터 ‘5’보다 큰 데이터를 선택하므로 ‘6’이 선택되고, 오른쪽에서부터 ‘5’보다 작은 데이터를 선택하므로 ‘1’이 선택된다. 단, 이처럼</p>\n<p><strong>위치가 엇갈리는 경우 ‘피벗’과 작은 데이터의 위치를 서로 변경</strong>한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/22b5ce04-0a67-4326-bf30-883814eb9ed5/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[분할완료]</code>이제 ‘5’의 왼쪽에 있는 데이터는 모두 5보다 작고, 오른쪽에 있는 데이터는 모두 ‘5’보다 크다는 특징이 있다. 이렇게 피벗을 기준으로 데이터 묶음을 나누는 작업을 분할(Divide)이라고 한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/442f06f2-b4e2-46d8-8e46-4a367ac4e73f/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[왼쪽 데이터 묶음 정렬]</code>왼쪽에 있는 데이터에 대해서 마찬가지로 정렬을 수행한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/c99385af-1acd-43ac-848b-143169bb6e30/image.png\" alt=\"\"></p>\n<p><code class=\"language-text\">[오른쪽 데이터 묶음 정렬]</code>오른쪽에 있는 데이터에 대해서 마찬가지로 정렬을 수행한다.</p>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/1a8fb67f-9623-4443-a2a0-5c8bc19bba9d/image.png\" alt=\"\"></p>\n<p>이러한 과정을 반복하면 전체 데이터에 대해서 정렬이 수행된다.</p>\n<h3 id=\"퀵-정렬이-빠른-이유-직관적인-이해\" style=\"position:relative;\">퀵 정렬이 빠른 이유: 직관적인 이해<a href=\"#%ED%80%B5-%EC%A0%95%EB%A0%AC%EC%9D%B4-%EB%B9%A0%EB%A5%B8-%EC%9D%B4%EC%9C%A0-%EC%A7%81%EA%B4%80%EC%A0%81%EC%9D%B8-%EC%9D%B4%ED%95%B4\" aria-label=\"퀵 정렬이 빠른 이유 직관적인 이해 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>이상적인 경우 분할이 절반씩 일어난다면 전체 연산 횟수로 <em>O</em>(<em>NlogN</em>)를 기대할 수 있다.</li>\n<li><code class=\"language-text\">너비 X 높이 = N X logN = NlogN</code></li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/images/minseok0123/post/f8e6ee2f-3dba-440c-9957-c8be82eb8297/image.png\" alt=\"\"></p>\n<h3 id=\"퀵-정렬의-시간-복잡도\" style=\"position:relative;\">퀵 정렬의 시간 복잡도<a href=\"#%ED%80%B5-%EC%A0%95%EB%A0%AC%EC%9D%98-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"퀵 정렬의 시간 복잡도 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>퀵정렬은 평균적으로 O(n log n)의 시간 복잡도를 가지지만, 최악의 경우에는 O(n^2)의 시간 복잡도를 가질 수 있습니다. 최악의 경우는 피벗이 항상 최솟값 또는 최댓값으로 선택되는 경우에 발생합니다. 이러한 경우를 피하기 위해 피벗을 랜덤하게 선택하거나 중간값을 선택하는 방법 등을 사용할 수 있습니다.</p>\n<ul>\n<li>퀵 정렬은 평균의 경우 <em>O</em>(<em>NlogN</em>)의 시간 복잡도를 가진다.</li>\n<li>하지만 최악의 경우 <em>O</em>(<em>N</em>2)의 시간 복잡도를 가진다.</li>\n</ul>\n<p><code class=\"language-text\">첫 번째 원소를 피벗으로 삼을 때, 이미 정렬된 배열에 대해서 퀵 정렬을 수행할 경우 최악의 경우이다.</code></p>\n<ul>\n<li>표준 라이브러리를 사용하는 경우, 기본적으로 <em>O</em>(<em>NlogN</em>)을 보장한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token keyword\">if</span> start <span class=\"token operator\">>=</span> end<span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">return</span>\n\tpivot <span class=\"token operator\">=</span> start\n\tleft <span class=\"token operator\">=</span> start <span class=\"token operator\">+</span> <span class=\"token number\">1</span>\n\tright <span class=\"token operator\">=</span> end\n\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;=</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">&lt;=</span>end <span class=\"token keyword\">and</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>array<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tleft <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>right<span class=\"token operator\">></span>start <span class=\"token keyword\">and</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token operator\">>=</span>array<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tright <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\t\t\tarray<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span>\n\t\t<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n\t\t\tarray<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> array<span class=\"token punctuation\">[</span>right<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">[</span>left<span class=\"token punctuation\">]</span>\n\tquick_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> right<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\tquick_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> right<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span>\n\nquick_sort<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">[실행 결과]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[0,1,2,3,4,5,6,7,8,9]</code></pre></div>\n<h1 id=\"문제---두-배열의-원소-교체\" style=\"position:relative;\">문제 - 두 배열의 원소 교체<a href=\"#%EB%AC%B8%EC%A0%9C---%EB%91%90-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9B%90%EC%86%8C-%EA%B5%90%EC%B2%B4\" aria-label=\"문제   두 배열의 원소 교체 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<blockquote>\n<p>동빈이는 두 개의 배열 A와 B를 가지고 있다. 두 배열은 N개의 원소로 구성되어 있으며, 배열의 원소는모두 자연수이다</p>\n<p>동빈이는 최대 K 번의 바꿔치기 연산을 수행할 수 있는데, 바꿔치기 연산이란 배열 A에 있는 원소 하나와배열 B에 있는 원소 하나를 골라서 두 원소를 서로 바꾸는 것을 말한다</p>\n<p>동빈이의 최종 목표는 배열 A의 모든 원소의 합이 최대가 되도록 하는 것이며, 여러분은 동빈이를 도와야한다</p>\n<p>N, K, 그리고 배열 A와 B의 정보가 주어졌을 때, 최대 K 번의 바꿔치기 연산을 수행하여 만들 수 있는배열 A의 모든 원소의 합의 최댓값을 출력하는 프로그램을 작성하라</p>\n<p>예를 들어 N = 5, K = 3이고, 배열 A와 B가 다음과 같다고 해보자</p>\n<ul>\n<li>배열 A = [1, 2, 5, 4, 3]</li>\n<li>배열 B = [5, 5, 6, 6, 5]이 경우, 다음과 같이 세 번의 연산을 수행할 수 있다</li>\n<li>연산 1) 배열 A의 원소 ‘1’과 배열 B의 원소 ‘6’을 바꾸기</li>\n<li>연산 2) 배열 A의 원소 ‘2’와 배열 B의 원소 ‘6’을 바꾸기</li>\n<li>연산 3) 배열 A의 원소 ‘3’과 배열 B의 원소 ‘5’를 바꾸기세 번의 연산 이후 배열 A와 배열 B의 상태는 다음과 같이 구성될 것이다</li>\n<li>배열 A = [6, 6, 5, 4, 5]</li>\n<li>배열 B = [3, 5, 1, 2, 5]이때 배열 A의 모든 원소의 합은 26이 되며, 이보다 더 합을 크게 만들 수는 없다</li>\n</ul>\n</blockquote>\n<hr>\n<h3 id=\"입력\" style=\"position:relative;\">입력<a href=\"#%EC%9E%85%EB%A0%A5\" aria-label=\"입력 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>첫 번째 줄: N, K 가 공백으로 구분되어 입력 (1 &#x3C;= N &#x3C;= 100,000, 0 &#x3C;= K &#x3C;= N)</li>\n<li>두 번째 줄: 배열 A의 원소들이 공백으로 구분되어 입력 (원소 a &#x3C; 10,000,000인 자연수)</li>\n<li>세 번째 줄: 배열 B의 원소들이 공백으로 구분되어 입력 (원소 b &#x3C; 10,000,000인 자연수)</li>\n</ul>\n<h3 id=\"출력\" style=\"position:relative;\">출력<a href=\"#%EC%B6%9C%EB%A0%A5\" aria-label=\"출력 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>최대 K번 바꿔치기 연산을 수행해서 가장 최대의 합을 갖는 A의 모든 원소 값의 합을 출력</li>\n</ul>\n<p><strong>입력 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5 3\n1 2 5 4 3\n5 5 6 6 5</code></pre></div>\n<p><strong>출력 예시</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">26</code></pre></div>\n<hr>\n<p><strong><code class=\"language-text\">코드 구현</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">n<span class=\"token punctuation\">,</span> k <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\na <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\na<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nb<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>reverse <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  <span class=\"token keyword\">if</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">break</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<hr>\n<p><strong><code class=\"language-text\">실행 결과</code></strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">26</code></pre></div>\n<hr>","frontmatter":{"title":"정렬 알고리즘","summary":"시뮬레이션과 완전탐색은 CS에서 중요한 개념으로, 다양한 문제를 해결하기 위해 사용된다. 시뮬레이션과 완전탐색에 대해 알아보고, 각각의 개념을 어떻게 활용하는지 알아보자.","date":"2023.05.13","categories":["알고리즘","Python"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#181818","images":{"fallback":{"src":"/static/eb51d20db908fb423189b6c6fe7e937c/afa21/sort.jpg","srcSet":"/static/eb51d20db908fb423189b6c6fe7e937c/1b894/sort.jpg 320w,\n/static/eb51d20db908fb423189b6c6fe7e937c/30f07/sort.jpg 640w,\n/static/eb51d20db908fb423189b6c6fe7e937c/afa21/sort.jpg 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[{"srcSet":"/static/eb51d20db908fb423189b6c6fe7e937c/5e011/sort.webp 320w,\n/static/eb51d20db908fb423189b6c6fe7e937c/90d07/sort.webp 640w,\n/static/eb51d20db908fb423189b6c6fe7e937c/9e21f/sort.webp 1280w","type":"image/webp","sizes":"(min-width: 1280px) 1280px, 100vw"}]},"width":1280,"height":1280}},"publicURL":"/static/eb51d20db908fb423189b6c6fe7e937c/sort.jpeg"}}}}]}},"pageContext":{"slug":"/정렬 알고리즘/"}},"staticQueryHashes":[],"slicesMap":{}}