{"componentChunkName":"component---src-templates-post-template-tsx","path":"/static 접근방식 변수, 함수, 생성자/","result":{"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h1 id=\"static-접근방식-변수-함수-생성자\" style=\"position:relative;\">static 접근방식 변수, 함수, 생성자<a href=\"#static-%EC%A0%91%EA%B7%BC%EB%B0%A9%EC%8B%9D-%EB%B3%80%EC%88%98-%ED%95%A8%EC%88%98-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"static 접근방식 변수 함수 생성자 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<p><strong>일반 맴버 변수</strong>는 객체를 생성해야지만 메모리가 생성된다. <em>(별도로 메모리를 할당해야 접근가능)</em><br>\n하지만 <strong>스태틱 변수</strong>는 객체 생성 이전에 접근할 수 있다. <em>(프로그램 시작과 동시에 가장 먼저 할당)</em></p>\n<h2 id=\"1-Static-변수--객체생성-X\" style=\"position:relative;\">1. Static 변수 : 객체생성 X<a href=\"#1-Static-%EB%B3%80%EC%88%98--%EA%B0%9D%EC%B2%B4%EC%83%9D%EC%84%B1-X\" aria-label=\"1 Static 변수  객체생성 X permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>특징 : <strong>클래스명</strong>으로 바로 접근 (프로그램 시작과 동시에 접근 가능)</li>\n</ul>\n<h2 id=\"2-일반-맴버-변수--객체생성-O\" style=\"position:relative;\">2. 일반 맴버 변수 : 객체생성 O<a href=\"#2-%EC%9D%BC%EB%B0%98-%EB%A7%B4%EB%B2%84-%EB%B3%80%EC%88%98--%EA%B0%9D%EC%B2%B4%EC%83%9D%EC%84%B1-O\" aria-label=\"2 일반 맴버 변수  객체생성 O permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li>특징 : <strong>객체를 생성</strong>해야만 메모리가 생성된다. (별도로 메모리를 할당하는 과정 -> 접근가능)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// 다른 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Access</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> 스태틱변수 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> 일반변수 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">main</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 변수 : 바로 다이렉트로 클래스명으로 접근가능</span>\n        Access<span class=\"token punctuation\">.</span>스태틱변수 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 객체생성을 안해도, 프로그램이 시작되면 이미 메모리가 할당되어 있다.</span>\n\n        <span class=\"token comment\">// 이 코드는 쓰레기에요!</span>\n        Access<span class=\"token punctuation\">.</span>일반변수 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 별도로 메모리를 할당한 뒤에야 접근 가능</span>\n\n\n        <span class=\"token comment\">// 이 코드는 사용할 수 있어요!</span>\n        Access 객체 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Access</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//메모리를 할당</span>\n        객체<span class=\"token punctuation\">.</span>일반변수 <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>객체<span class=\"token punctuation\">.</span>일반변수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 일반 변수</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>Access<span class=\"token punctuation\">.</span>스태틱변수<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 스태틱 변수</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<h1 id=\"static-함수-vs-일반-함수-접근-차이\" style=\"position:relative;\">static 함수 vs 일반 함수 접근 차이<a href=\"#static-%ED%95%A8%EC%88%98-vs-%EC%9D%BC%EB%B0%98-%ED%95%A8%EC%88%98-%EC%A0%91%EA%B7%BC-%EC%B0%A8%EC%9D%B4\" aria-label=\"static 함수 vs 일반 함수 접근 차이 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<h3 id=\"Static-맴버-함수와-일반-멤버-함수-접근-방식의-차이\" style=\"position:relative;\">[Static 맴버 함수]와 [일반 멤버 함수] 접근 방식의 차이<a href=\"#Static-%EB%A7%B4%EB%B2%84-%ED%95%A8%EC%88%98%EC%99%80-%EC%9D%BC%EB%B0%98-%EB%A9%A4%EB%B2%84-%ED%95%A8%EC%88%98-%EC%A0%91%EA%B7%BC-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%B0%A8%EC%9D%B4\" aria-label=\"Static 맴버 함수와 일반 멤버 함수 접근 방식의 차이 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>사실 위에서 언급한 변수 접근 방식의 차이와 비슷하다</li>\n</ul>\n<h3 id=\"스태틱-맴버-함수에서-주의할-점\" style=\"position:relative;\">[스태틱 맴버 함수에서 주의할 점]<a href=\"#%EC%8A%A4%ED%83%9C%ED%8B%B1-%EB%A7%B4%EB%B2%84-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%A3%BC%EC%9D%98%ED%95%A0-%EC%A0%90\" aria-label=\"스태틱 맴버 함수에서 주의할 점 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>스태틱 함수를 이용해서 일반 멤버 필드에 접근 불가\n이유 : 일반 멤버 필드는 객체 생성 후에 존재하기 때문에 스태틱 함수에서는 접근 불가</li>\n</ul>\n<hr>\n<h1 id=\"스태틱-생성자\" style=\"position:relative;\">스태틱 생성자<a href=\"#%EC%8A%A4%ED%83%9C%ED%8B%B1-%EC%83%9D%EC%84%B1%EC%9E%90\" aria-label=\"스태틱 생성자 permalink\" class=\"custom-class after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h1>\n<ol>\n<li>생성자를 <strong>static</strong> 생성자로 선언할 수도 있다.\n그러나 <strong>static</strong> 생성자에서는 일반 변수는 쓸 수 없다.</li>\n</ol>\n<ul>\n<li>일반 멤버 변수는 객체를 생성해야만 메모리가 생성된다.</li>\n<li>하지만 스태틱 함수는 객체 생성 이전에 접근할 수 있기 때문</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading<span class=\"token punctuation\">.</span>Tasks</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// class 선언 : 스태틱 변수, 일반 변수</span>\n<span class=\"token keyword\">class</span> 테스트\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> 스태틱변수 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> 일반변수 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\n    <span class=\"token comment\">// 1. static 생성자 함수</span>\n    <span class=\"token keyword\">static</span> 테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 일반변수 = 10;</span>\n        스태틱변수 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[1. static 생성자 최초 실행]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 2. 일반 생성자 함수</span>\n    <span class=\"token keyword\">public</span> 테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        일반변수 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n        스태틱변수 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[2. 일반 생성자 최초 실행]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">main</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> args<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 스태틱 변수를 호출할 경우: static 생성자만 호출됩니다.</span>\n        테스트<span class=\"token punctuation\">.</span>스태틱변수 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행시 결과 = [1. static 생성자 최초 실행]가 실행된다.</span>\n\n\n        테스트 test <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 테스트<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행시 결과 = [1. static 생성자 최초 실행], [2. 일반 생성자 최초 실행]가 실행된다.</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>","frontmatter":{"title":"static 접근방식 변수, 함수, 생성자","summary":"일반 맴버 변수는 객체를 생성해야지만 메모리가 생성된다. (별도로 메모리를 할당해야 접근가능) 하지만 스태틱 변수는 객체 생성 이전에 접근할 수 있다. (프로그램 시작과 동시에 가장 먼저 할당)","date":"2023.11.02","categories":["C샵"],"thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#d8d8d8","images":{"fallback":{"src":"/static/fcc42778bbeefb1759f3eda87c1b8b2a/63d8e/static.png","srcSet":"/static/fcc42778bbeefb1759f3eda87c1b8b2a/2e067/static.png 151w,\n/static/fcc42778bbeefb1759f3eda87c1b8b2a/6d16b/static.png 302w,\n/static/fcc42778bbeefb1759f3eda87c1b8b2a/63d8e/static.png 604w","sizes":"(min-width: 604px) 604px, 100vw"},"sources":[{"srcSet":"/static/fcc42778bbeefb1759f3eda87c1b8b2a/43f11/static.webp 151w,\n/static/fcc42778bbeefb1759f3eda87c1b8b2a/5a5e0/static.webp 302w,\n/static/fcc42778bbeefb1759f3eda87c1b8b2a/a08ff/static.webp 604w","type":"image/webp","sizes":"(min-width: 604px) 604px, 100vw"}]},"width":604,"height":604}},"publicURL":"/static/fcc42778bbeefb1759f3eda87c1b8b2a/static.png"}}}}]}},"pageContext":{"slug":"/static 접근방식 변수, 함수, 생성자/"}},"staticQueryHashes":[],"slicesMap":{}}