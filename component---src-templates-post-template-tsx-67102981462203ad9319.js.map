{"version":3,"file":"component---src-templates-post-template-tsx-67102981462203ad9319.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHeadInfo.tsx","webpack://gatsby-starter-default/./src/components/Post/PostHead.tsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.tsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.tsx","webpack://gatsby-starter-default/./src/templates/post_template.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowLeft } from '@fortawesome/free-solid-svg-icons'\nimport { Link } from 'gatsby'\n\n\nexport type PostHeadInfoProps = {\n  title: string\n  date: string\n  categories: string[]\n}\n\n// const PostHeadInfoWrapper = styled.div`\n//   margin-top: 5.5rem;\n//   width: 768px;\n//   margin-left: auto;\n//   margin-right: auto;\n\n//   @media (max-width: 768px) {\n//     width: 100%;\n//     padding: 40px 20px;\n//   }\n// `\n\n// const PrevPageIcon = styled.div`\n//   display: grid;\n//   place-items: center;\n//   width: 40px;\n//   height: 40px;\n//   border-radius: 50%;\n//   background: #ffffff;\n//   color: #000000;\n//   font-size: 22px;\n//   cursor: pointer;\n//   box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\n\n//   @media (max-width: 768px) {\n//     width: 30px;\n//     height: 30px;\n//     font-size: 18px;\n//   }\n// `\n\nconst HeadWrap = styled.div`\n  @media (max-width: 1024px) {\n    padding-left: 1rem;\n    padding-right: 1rem;\n  }\n`\n\nconst Title = styled.h1`\n  font-size: 3rem;\n  line-height: 1.5;\n  letter-spacing: -0.004em;\n  margin-top: 0px;\n  font-weight: 800;\n  color: var(--text1);\n  margin-bottom: 2rem;\n  word-break: keep-all;\n  transition: color 0.125s ease-in 0s;\n\n  @media (max-width: 1024px) {\n    font-size: 2.25rem;\n  }\n`\n\nconst DateWrap = styled.div`\n  -webkit-box-align: center;\n  align-items: center;\n  font-size: 1rem;\n  color: var(--text2);\n  display: flex;\n  -webkit-box-pack: justify;\n\n  @media (max-width: 768px) {\n    margin-bottom: 0.75rem;\n  }\n`\n\nconst Date = styled.span`\n  color: var(--text2);\n`\n\nconst CateWrap = styled.div`\n  margin-top: 0.875rem;\n  margin-bottom: -0.875rem;\n  min-height: 0.875rem;\n\n  @media (max-width: 768px) {\n    margin-top: 0.5rem;\n    margin-bottom: -0.5rem;\n    min-height: 0.5rem;\n  }\n`\n\nconst Cate = styled.div`\n  margin-bottom: 0.875rem;\n  background: var(--bg-tag);\n  padding-left: 1rem;\n  padding-right: 1rem;\n  height: 2rem;\n  border-radius: 1rem;\n  display: inline-flex;\n  -webkit-box-align: center;\n  align-items: center;\n  margin-right: 0.875rem;\n  color: var(--velog);\n  text-decoration: none;\n  font-weight: 500;\n  font-size: 1rem;\n\n  @media (max-width: 768px) {\n    height: 1.5rem;\n    font-size: 0.75rem;\n    border-radius: 0.75rem;\n    padding-left: 0.75rem;\n    padding-right: 0.75rem;\n    margin-right: 0.5rem;\n    margin-bottom: 0.5rem;\n  }\n`\n\nconst PostHeadInfo: FunctionComponent<PostHeadInfoProps> = function ({\n  title,\n  date,\n  categories,\n}) {\n  // const goBackPage = () => window.history.back()\n\n  return (\n    <>\n      {/* <PostHeadInfoWrapper> */}\n      {/* <PrevPageIcon onClick={goBackPage}>\n          <FontAwesomeIcon icon={faArrowLeft} />\n        </PrevPageIcon> */}\n      <HeadWrap>\n        <Title>{title}</Title>\n        <DateWrap>\n          <Date>{date}</Date>\n        </DateWrap>\n        <CateWrap>\n          {Array.isArray(categories) &&\n            categories.map((category, index) => (\n              <Link to={`/?category=${category}`}>\n                <Cate key={index}>\n                  {index > 0}\n                  {category}\n                </Cate>\n              </Link>\n            ))}\n        </CateWrap>\n      </HeadWrap>\n      {/* </PostHeadInfoWrapper> */}\n    </>\n  )\n}\n\nexport default PostHeadInfo\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\nimport PostHeadInfo, { PostHeadInfoProps } from 'components/Post/PostHeadInfo'\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\nimport Introduction from 'components/Main/Introduction'\n\ntype GatsbyImgProps = {\n  image: IGatsbyImageData\n  alt: string\n  className?: string\n}\n\ntype PostHeadProps = PostHeadInfoProps & {\n  thumbnail: IGatsbyImageData\n}\n\nconst PostHeadWrapper = styled.div`\n  position: relative;\n  margin-top: 5.5rem;\n  width: 768px;\n  margin-left: auto;\n  margin-right: auto;\n\n  @media (max-width: 1024px) {\n    margin-top: 2rem;\n  }\n\n  @media (max-width: 768px) {\n    margin-top: 1.5rem;\n    width: 100%;\n  }\n`\n\nconst BackgroundImage = styled((props: GatsbyImgProps) => (\n  <GatsbyImage {...props} style={{ position: 'relative' }} />\n))`\n  z-index: -1;\n  width: 95%;\n  height: 400px;\n  object-fit: cover;\n  /* filter: brightness(0.25); */\n  display: block;\n  margin: 2rem auto 0px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\nconst PostHead: FunctionComponent<PostHeadProps> = function ({\n  title,\n  date,\n  categories,\n  thumbnail,\n}) {\n  return (\n    <>\n      <Introduction />\n      <PostHeadWrapper>\n        <PostHeadInfo title={title} date={date} categories={categories} />\n        <BackgroundImage image={thumbnail} alt=\"thumbnail\" />\n      </PostHeadWrapper>\n    </>\n  )\n}\n\nexport default PostHead\n","import React, { FunctionComponent } from 'react'\nimport styled from '@emotion/styled'\n\ntype PostContentProps = {\n  html: string\n}\n\nconst MarkdownRenderer = styled.div`\n  // Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 100px 0;\n  word-break: break-all;\n\n  // Markdown Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  // Apply Padding Attribute to All Elements\n  p {\n    padding: 3px 0;\n  }\n\n  // Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 80px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  }\n\n  // Adjust Quotation Element Style\n  blockquote {\n    margin: 2rem 0px;\n    border-left: 4px solid var(--velog);\n    border-top-right-radius: 4px;\n    border-bottom-right-radius: 4px;\n    background: var(--bg-element2);\n    padding: 1rem 1rem 1rem 2rem;\n    color: var(--text1);\n  }\n\n  // Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    padding: 30px 0;\n  }\n\n  // Adjust Horizontal Rule style\n  hr {\n    border: 1px solid var(--hr);\n    margin: 100px 0;\n  }\n\n  // Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  // Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n    background: var(--prism-bg);\n    color: var(--prism-default-text);\n  }\n\n  // Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }\n`\n\nconst PostContent: FunctionComponent<PostContentProps> = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { useEffect, useRef } from 'react'\nimport { useRecoilValue } from 'recoil'\nimport { themeState } from '../../recoil/recoil'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'minseok0123/minseok0123.github.io' // 자신 계정의 레포지토리로 설정\n\ntype UtterancesAttributesType = {\n  src: string\n  repo: string\n  'issue-term': string\n  label: string\n  theme: string\n  crossorigin: string\n  async: string\n}\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget = ({ id }: { id: string }) => {\n  const element = useRef<HTMLDivElement>(null)\n  const theme = useRecoilValue(themeState)\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances: HTMLScriptElement = document.createElement('script')\n\n    const attributes: UtterancesAttributesType = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'Comment',\n      theme: `github-${theme}`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    // 이전에 생성된 스크립트 엘리먼트 삭제\n    const utterancesWrapper = element.current\n    while (utterancesWrapper.firstChild) {\n      utterancesWrapper.removeChild(utterancesWrapper.firstChild)\n    }\n\n    element.current.appendChild(utterances)\n  }, [theme, id])\n\n  return <UtterancesWrapper ref={element} id={id} />\n}\n\nexport default CommentWidget\n","import React, { FunctionComponent } from 'react'\nimport { graphql } from 'gatsby'\nimport { PostPageItemType } from 'types/PostItem.types'\nimport Template from 'components/Common/Template'\nimport PostHead from 'components/Post/PostHead'\nimport PostContent from 'components/Post/PostContent'\nimport CommentWidget from 'components/Post/CommentWidget'\n\ntype PostTemplateProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: PostPageItemType[]\n    }\n  }\n  location: {\n    href: string\n  }\n}\n\nconst PostTemplate: FunctionComponent<PostTemplateProps> = function ({\n  data: {\n    allMarkdownRemark: { edges },\n  },\n  location: { href },\n}) {\n  const {\n    node: {\n      html,\n      frontmatter: {\n        title,\n        summary,\n        date,\n        categories,\n        thumbnail: {\n          childImageSharp: { gatsbyImageData },\n          publicURL,\n        },\n      },\n    },\n  } = edges[0]\n\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default PostTemplate\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["HeadWrap","_styled","target","name","styles","Title","DateWrap","Date","CateWrap","Cate","_ref","title","date","categories","___EmotionJSX","React","Array","isArray","map","category","index","Link","to","key","PostHeadWrapper","BackgroundImage","props","GatsbyImage","_extends","style","position","thumbnail","Introduction","PostHeadInfo","image","alt","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","id","element","useRef","theme","useRecoilValue","themeState","useEffect","current","utterances","document","createElement","attributes","src","repo","label","crossorigin","async","Object","entries","forEach","_ref2","value","setAttribute","utterancesWrapper","firstChild","removeChild","appendChild","ref","data","allMarkdownRemark","edges","location","href","node","frontmatter","summary","childImageSharp","gatsbyImageData","publicURL","Template","description","url","PostHead","PostContent","CommentWidget"],"sourceRoot":""}